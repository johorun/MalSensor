<?xml version='1.0' encoding='utf-8'?>
<gexf xmlns="http://www.gexf.net/1.2draft" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd" version="1.2">
  <meta lastmodifieddate="2023-09-29">
    <creator>NetworkX 2.6.3</creator>
  </meta>
  <graph defaultedgetype="directed" mode="static" name="">
    <nodes>
      <node id="sub_401000" label="sub_401000" />
      <node id="sub_401020" label="sub_401020" />
      <node id="sub_401160" label="sub_401160" />
      <node id="_wmain" label="_wmain" />
      <node id="sub_401390" label="sub_401390" />
      <node id="sub_4014B0" label="sub_4014B0" />
      <node id="sub_402AA0" label="sub_402AA0" />
      <node id="sub_401630" label="sub_401630" />
      <node id="sub_402C20" label="sub_402C20" />
      <node id="___tmainCRTStartup" label="___tmainCRTStartup" />
      <node id="NCryptOpenStorageProvider" label="NCryptOpenStorageProvider" />
      <node id="BCryptOpenAlgorithmProvider" label="BCryptOpenAlgorithmProvider" />
      <node id="BCryptDestroyHash" label="BCryptDestroyHash" />
      <node id="BCryptHashData" label="BCryptHashData" />
      <node id="BCryptFinishHash" label="BCryptFinishHash" />
      <node id="BCryptVerifySignature" label="BCryptVerifySignature" />
      <node id="BCryptCloseAlgorithmProvider" label="BCryptCloseAlgorithmProvider" />
      <node id="NCryptFinalizeKey" label="NCryptFinalizeKey" />
      <node id="NCryptFreeObject" label="NCryptFreeObject" />
      <node id="NCryptDeleteKey" label="NCryptDeleteKey" />
      <node id="BCryptImportKeyPair" label="BCryptImportKeyPair" />
      <node id="BCryptDestroyKey" label="BCryptDestroyKey" />
      <node id="NCryptCreatePersistedKey" label="NCryptCreatePersistedKey" />
      <node id="NCryptSignHash" label="NCryptSignHash" />
      <node id="BCryptCreateHash" label="BCryptCreateHash" />
      <node id="BCryptGetProperty" label="BCryptGetProperty" />
      <node id="NCryptExportKey" label="NCryptExportKey" />
      <node id="__security_check_cookie(x)" label="__security_check_cookie(x)" />
      <node id="start" label="start" />
      <node id="___report_gsfailure" label="___report_gsfailure" />
      <node id="_amsg_exit" label="_amsg_exit" />
      <node id="_pre_cpp_init" label="_pre_cpp_init" />
      <node id="__onexit" label="__onexit" />
      <node id="_atexit" label="_atexit" />
      <node id="sub_403554" label="sub_403554" />
      <node id="_pre_c_init" label="_pre_c_init" />
      <node id="_XcptFilter" label="_XcptFilter" />
      <node id="__ValidateImageBase" label="__ValidateImageBase" />
      <node id="__IsNonwritableInCurrentImage" label="__IsNonwritableInCurrentImage" />
      <node id="__FindPESection" label="__FindPESection" />
      <node id="_initterm" label="_initterm" />
      <node id="_initterm_e" label="_initterm_e" />
      <node id="__SEH_prolog4" label="__SEH_prolog4" />
      <node id="__SEH_epilog4" label="__SEH_epilog4" />
      <node id="__setdefaultprecision" label="__setdefaultprecision" />
      <node id="UserMathErrorFunction" label="UserMathErrorFunction" />
      <node id="___security_init_cookie" label="___security_init_cookie" />
      <node id="_crt_debugger_hook" label="_crt_debugger_hook" />
      <node id="terminate(void)" label="terminate(void)" />
      <node id="__CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)" label="__CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)" />
      <node id="_unlock" label="_unlock" />
      <node id="__dllonexit" label="__dllonexit" />
      <node id="_lock" label="_lock" />
      <node id="_except_handler4_common" label="_except_handler4_common" />
      <node id="__except_handler4" label="__except_handler4" />
      <node id="_invoke_watson" label="_invoke_watson" />
      <node id="_controlfp_s" label="_controlfp_s" />
      <node id="__CxxFrameHandler3" label="__CxxFrameHandler3" />
      <node id="__alloca_probe" label="__alloca_probe" />
      <node id="memcpy" label="memcpy" />
      <node id="ExitProcess" label="ExitProcess" />
      <node id="LoadLibraryExA" label="LoadLibraryExA" />
      <node id="GetSystemTimeAsFileTime" label="GetSystemTimeAsFileTime" />
      <node id="GetCurrentProcessId" label="GetCurrentProcessId" />
      <node id="GetCurrentThreadId" label="GetCurrentThreadId" />
      <node id="GetTickCount" label="GetTickCount" />
      <node id="QueryPerformanceCounter" label="QueryPerformanceCounter" />
      <node id="IsDebuggerPresent" label="IsDebuggerPresent" />
      <node id="SetUnhandledExceptionFilter" label="SetUnhandledExceptionFilter" />
      <node id="sub_403483" label="sub_403483" />
      <node id="UnhandledExceptionFilter" label="UnhandledExceptionFilter" />
      <node id="GetCurrentProcess" label="GetCurrentProcess" />
      <node id="TerminateProcess" label="TerminateProcess" />
      <node id="InterlockedCompareExchange" label="InterlockedCompareExchange" />
      <node id="Sleep" label="Sleep" />
      <node id="InterlockedExchange" label="InterlockedExchange" />
      <node id="GetProcAddress" label="GetProcAddress" />
      <node id="GetLastError" label="GetLastError" />
      <node id="FreeConsole" label="FreeConsole" />
      <node id="GetProcessHeap" label="GetProcessHeap" />
      <node id="HeapAlloc" label="HeapAlloc" />
      <node id="HeapFree" label="HeapFree" />
      <node id="MessageBoxA" label="MessageBoxA" />
      <node id="std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::~basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(void)" label="std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::~basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(void)" />
      <node id="std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(char const *)" label="std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(char const *)" />
      <node id="std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; const &amp;,std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; const &amp;)" label="std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; const &amp;,std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; const &amp;)" />
      <node id="_decode_pointer" label="_decode_pointer" />
      <node id="__wgetmainargs" label="__wgetmainargs" />
      <node id="_onexit" label="_onexit" />
      <node id="atoi" label="atoi" />
      <node id="wprintf" label="wprintf" />
      <node id="printf" label="printf" />
      <node id="_cexit" label="_cexit" />
      <node id="_exit" label="_exit" />
      <node id="exit" label="exit" />
      <node id="_configthreadlocale" label="_configthreadlocale" />
      <node id="__setusermatherr" label="__setusermatherr" />
      <node id="__p__commode" label="__p__commode" />
      <node id="__p__fmode" label="__p__fmode" />
      <node id="_encode_pointer" label="_encode_pointer" />
      <node id="__set_app_type" label="__set_app_type" />
    </nodes>
    <edges>
      <edge source="sub_401000" target="wprintf" id="0" />
      <edge source="sub_401020" target="sub_401000" id="1" />
      <edge source="sub_401020" target="BCryptOpenAlgorithmProvider" id="2" />
      <edge source="sub_401020" target="BCryptDestroyHash" id="3" />
      <edge source="sub_401020" target="BCryptHashData" id="4" />
      <edge source="sub_401020" target="BCryptFinishHash" id="5" />
      <edge source="sub_401020" target="BCryptCloseAlgorithmProvider" id="6" />
      <edge source="sub_401020" target="BCryptCreateHash" id="7" />
      <edge source="sub_401020" target="BCryptGetProperty" id="8" />
      <edge source="sub_401020" target="GetProcessHeap" id="9" />
      <edge source="sub_401020" target="HeapAlloc" id="10" />
      <edge source="sub_401020" target="HeapFree" id="11" />
      <edge source="sub_401020" target="wprintf" id="12" />
      <edge source="sub_401160" target="sub_401000" id="13" />
      <edge source="sub_401160" target="sub_401020" id="14" />
      <edge source="sub_401160" target="NCryptOpenStorageProvider" id="15" />
      <edge source="sub_401160" target="NCryptFinalizeKey" id="16" />
      <edge source="sub_401160" target="NCryptFreeObject" id="17" />
      <edge source="sub_401160" target="NCryptDeleteKey" id="18" />
      <edge source="sub_401160" target="NCryptCreatePersistedKey" id="19" />
      <edge source="sub_401160" target="NCryptSignHash" id="20" />
      <edge source="sub_401160" target="NCryptExportKey" id="21" />
      <edge source="sub_401160" target="GetProcessHeap" id="22" />
      <edge source="sub_401160" target="HeapAlloc" id="23" />
      <edge source="sub_401160" target="HeapFree" id="24" />
      <edge source="sub_401160" target="wprintf" id="25" />
      <edge source="_wmain" target="sub_401000" id="26" />
      <edge source="_wmain" target="sub_401160" id="27" />
      <edge source="_wmain" target="sub_401390" id="28" />
      <edge source="_wmain" target="sub_402AA0" id="29" />
      <edge source="_wmain" target="sub_402C20" id="30" />
      <edge source="_wmain" target="__security_check_cookie(x)" id="31" />
      <edge source="_wmain" target="__CxxFrameHandler3" id="32" />
      <edge source="_wmain" target="ExitProcess" id="33" />
      <edge source="_wmain" target="LoadLibraryExA" id="34" />
      <edge source="_wmain" target="FreeConsole" id="35" />
      <edge source="_wmain" target="GetProcessHeap" id="36" />
      <edge source="_wmain" target="HeapFree" id="37" />
      <edge source="_wmain" target="MessageBoxA" id="38" />
      <edge source="_wmain" target="std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::~basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(void)" id="39" />
      <edge source="_wmain" target="std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(char const *)" id="40" />
      <edge source="_wmain" target="std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; const &amp;,std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; const &amp;)" id="41" />
      <edge source="_wmain" target="wprintf" id="42" />
      <edge source="sub_401390" target="sub_401020" id="43" />
      <edge source="sub_401390" target="BCryptOpenAlgorithmProvider" id="44" />
      <edge source="sub_401390" target="BCryptVerifySignature" id="45" />
      <edge source="sub_401390" target="BCryptCloseAlgorithmProvider" id="46" />
      <edge source="sub_401390" target="BCryptImportKeyPair" id="47" />
      <edge source="sub_401390" target="BCryptDestroyKey" id="48" />
      <edge source="sub_401390" target="GetProcessHeap" id="49" />
      <edge source="sub_401390" target="HeapFree" id="50" />
      <edge source="sub_401390" target="wprintf" id="51" />
      <edge source="sub_4014B0" target="__security_check_cookie(x)" id="52" />
      <edge source="sub_4014B0" target="__alloca_probe" id="53" />
      <edge source="sub_4014B0" target="printf" id="54" />
      <edge source="sub_402AA0" target="sub_4014B0" id="55" />
      <edge source="sub_402AA0" target="sub_401630" id="56" />
      <edge source="sub_402AA0" target="__security_check_cookie(x)" id="57" />
      <edge source="sub_402AA0" target="__CxxFrameHandler3" id="58" />
      <edge source="sub_402AA0" target="memcpy" id="59" />
      <edge source="sub_402AA0" target="LoadLibraryExA" id="60" />
      <edge source="sub_402AA0" target="std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::~basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(void)" id="61" />
      <edge source="sub_402AA0" target="std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(char const *)" id="62" />
      <edge source="sub_402AA0" target="atoi" id="63" />
      <edge source="sub_401630" target="GetLastError" id="64" />
      <edge source="sub_402C20" target="__security_check_cookie(x)" id="65" />
      <edge source="sub_402C20" target="__CxxFrameHandler3" id="66" />
      <edge source="sub_402C20" target="LoadLibraryExA" id="67" />
      <edge source="sub_402C20" target="GetProcAddress" id="68" />
      <edge source="sub_402C20" target="std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::~basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(void)" id="69" />
      <edge source="sub_402C20" target="std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(char const *)" id="70" />
      <edge source="sub_402C20" target="std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; const &amp;,std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt; const &amp;)" id="71" />
      <edge source="___tmainCRTStartup" target="_wmain" id="72" />
      <edge source="___tmainCRTStartup" target="_amsg_exit" id="73" />
      <edge source="___tmainCRTStartup" target="_XcptFilter" id="74" />
      <edge source="___tmainCRTStartup" target="__IsNonwritableInCurrentImage" id="75" />
      <edge source="___tmainCRTStartup" target="_initterm" id="76" />
      <edge source="___tmainCRTStartup" target="_initterm_e" id="77" />
      <edge source="___tmainCRTStartup" target="__SEH_prolog4" id="78" />
      <edge source="___tmainCRTStartup" target="__SEH_epilog4" id="79" />
      <edge source="___tmainCRTStartup" target="InterlockedCompareExchange" id="80" />
      <edge source="___tmainCRTStartup" target="Sleep" id="81" />
      <edge source="___tmainCRTStartup" target="InterlockedExchange" id="82" />
      <edge source="___tmainCRTStartup" target="_cexit" id="83" />
      <edge source="___tmainCRTStartup" target="_exit" id="84" />
      <edge source="___tmainCRTStartup" target="exit" id="85" />
      <edge source="__security_check_cookie(x)" target="___report_gsfailure" id="86" />
      <edge source="start" target="___tmainCRTStartup" id="87" />
      <edge source="start" target="___security_init_cookie" id="88" />
      <edge source="___report_gsfailure" target="_crt_debugger_hook" id="89" />
      <edge source="___report_gsfailure" target="IsDebuggerPresent" id="90" />
      <edge source="___report_gsfailure" target="SetUnhandledExceptionFilter" id="91" />
      <edge source="___report_gsfailure" target="UnhandledExceptionFilter" id="92" />
      <edge source="___report_gsfailure" target="GetCurrentProcess" id="93" />
      <edge source="___report_gsfailure" target="TerminateProcess" id="94" />
      <edge source="_pre_cpp_init" target="_amsg_exit" id="95" />
      <edge source="_pre_cpp_init" target="_atexit" id="96" />
      <edge source="_pre_cpp_init" target="__wgetmainargs" id="97" />
      <edge source="__onexit" target="__SEH_prolog4" id="98" />
      <edge source="__onexit" target="__SEH_epilog4" id="99" />
      <edge source="__onexit" target="_unlock" id="100" />
      <edge source="__onexit" target="__dllonexit" id="101" />
      <edge source="__onexit" target="_lock" id="102" />
      <edge source="__onexit" target="_decode_pointer" id="103" />
      <edge source="__onexit" target="_onexit" id="104" />
      <edge source="__onexit" target="_encode_pointer" id="105" />
      <edge source="_atexit" target="__onexit" id="106" />
      <edge source="_pre_c_init" target="sub_403554" id="107" />
      <edge source="_pre_c_init" target="__setdefaultprecision" id="108" />
      <edge source="_pre_c_init" target="UserMathErrorFunction" id="109" />
      <edge source="_pre_c_init" target="_configthreadlocale" id="110" />
      <edge source="_pre_c_init" target="__setusermatherr" id="111" />
      <edge source="_pre_c_init" target="__p__commode" id="112" />
      <edge source="_pre_c_init" target="__p__fmode" id="113" />
      <edge source="_pre_c_init" target="_encode_pointer" id="114" />
      <edge source="_pre_c_init" target="__set_app_type" id="115" />
      <edge source="__IsNonwritableInCurrentImage" target="__ValidateImageBase" id="116" />
      <edge source="__IsNonwritableInCurrentImage" target="__FindPESection" id="117" />
      <edge source="__setdefaultprecision" target="_invoke_watson" id="118" />
      <edge source="__setdefaultprecision" target="_controlfp_s" id="119" />
      <edge source="___security_init_cookie" target="GetSystemTimeAsFileTime" id="120" />
      <edge source="___security_init_cookie" target="GetCurrentProcessId" id="121" />
      <edge source="___security_init_cookie" target="GetCurrentThreadId" id="122" />
      <edge source="___security_init_cookie" target="GetTickCount" id="123" />
      <edge source="___security_init_cookie" target="QueryPerformanceCounter" id="124" />
      <edge source="__CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)" target="terminate(void)" id="125" />
      <edge source="__except_handler4" target="_except_handler4_common" id="126" />
      <edge source="sub_403483" target="SetUnhandledExceptionFilter" id="127" />
    </edges>
  </graph>
</gexf>
